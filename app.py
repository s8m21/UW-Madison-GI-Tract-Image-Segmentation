# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hiuxTX952bzuTB-up_2DRcqK70kq_lU5
"""

import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.transforms.functional as TF
from PIL import Image
import numpy as np
import gradio as gr
from transformers import AutoModelForImageSegmentation

def transform_image(image):
    transform = transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    return transform(image).unsqueeze(0)

def predict(image):
    image = Image.fromarray(image.astype('uint8'), 'RGB')
    tensor = transform_image(image)
    model = AutoModelForImageSegmentation.from_pretrained("spandan21/Image-Segmentation-Model")
    model.eval()
    with torch.no_grad():
        output = model(tensor)
    # Adjust the output format if necessary depending on model output details
    return output[0].permute(1, 2, 0).numpy()

iface = gr.Interface(fn=predict,
                     inputs=gr.inputs.Image(shape=(256, 256)),
                     outputs=gr.outputs.Image(type="numpy"),
                     title="Image Segmentation with U-Net",
                     description="Upload an image to see the segmentation.")

if __name__ == "__main__":
    iface.launch()
